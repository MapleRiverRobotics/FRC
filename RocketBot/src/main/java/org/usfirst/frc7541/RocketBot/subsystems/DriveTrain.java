// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc7541.RocketBot.subsystems;


import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import org.usfirst.frc7541.RocketBot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.PWMTalonSRX;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private AnalogGyro gyro;
    private AnalogInput ultrasonic;
    private WPI_TalonSRX leftMaster;
    private WPI_TalonSRX rightMaster;
    private DifferentialDrive differentialDrive;
    private WPI_TalonSRX leftSlave;
    private WPI_TalonSRX rightSlave;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        gyro = new AnalogGyro(0);
        addChild("Gyro",gyro);
        gyro.setSensitivity(0.007);
        
        ultrasonic = new AnalogInput(1);
        addChild("Ultrasonic",ultrasonic);
       

        leftMaster = new WPI_TalonSRX(1);
        leftMaster.setInverted(true);
        addChild("LeftMaster",leftMaster);
        
        rightMaster = new WPI_TalonSRX(4);
        addChild("RightMaster",rightMaster);
        rightMaster.setInverted(true);
        
        differentialDrive = new DifferentialDrive(leftMaster, rightMaster);
        addChild("Differential Drive",differentialDrive);
        differentialDrive.setSafetyEnabled(false);
        differentialDrive.setExpiration(0.1);
        differentialDrive.setMaxOutput(1.0);

        
        leftSlave = new WPI_TalonSRX(2);
        leftSlave.follow(leftMaster);
        leftSlave.setInverted(true);
        addChild("LeftSlave",leftSlave);
        
        rightSlave = new WPI_TalonSRX(3);
        addChild("RightSlave",rightSlave);
        rightSlave.setInverted(true);
        rightSlave.follow(rightMaster);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TeleOpDriveCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
  /**
   * Tank style driving for the DriveTrain.
   *
   * @param speed Speed in range [-1,1]
   * @param rotation Rotation in range [-1,1]
   */
  public void drive(double speed, double rotation) {
    SmartDashboard.putNumber("Speed", speed);
    SmartDashboard.putNumber("Rotation", rotation);

    // if joystick not more than 10% throttle/movement, then reset to zero
    if (isSpeedInDeadband(speed)) {
      speed = 0.0;
    }
    if (isRotationInDeadband(rotation)) {
      rotation = 0.0;
    }

    differentialDrive.arcadeDrive(-speed, rotation);
  }

  private boolean isSpeedInDeadband(double speed) {
    return (Math.abs(speed) < 0.1);
  }

  private boolean isRotationInDeadband(double rotation) {
    return (Math.abs(rotation) < 0.1);
  }
}

